# ANY SUBSTITUTION VARIABLE STARTING WITH "ML_INSTALL_" ARE 'envsubst' DURING INSTALL
substitutions:
  # Order matters!
  DATA_DIR: ${ML_INSTALL_DATA_DIR}
  TMP_DIR: ${ML_INSTALL_TMP_DIR}
  CFG_DIR: ${ML_INSTALL_CFG_DIR}
  LOGGING_DIR: ${ML_INSTALL_LOGGING_DIR}

  # These will be imported from the file to be used as variables (secrets)
  IncludeFile: "${CFG_DIR}/secrets.yml"

  ROUTE_NAME: ${ML_INSTALL_ROUTE_NAME}
  ROUTE_HOST: ${ML_INSTALL_ROUTE_HOST}
  ROUTE_PORT: ${ML_INSTALL_ROUTE_PORT}

  # --------- Example
  EXAMPLE: "World!"

THIS IS AN EXAMPLE:
  of substitution variables: "Hello, ${EXAMPLE}"

system:
  config_path: ${ML_INSTALL_CFG_DIR}
  # Path where the system will store variable data (models, tokens, serialized data, etc)
  variable_data_path: ${ML_INSTALL_DATA_DIR}
  # Path where temp files will be stored
  tmp_path: ${ML_INSTALL_TMP_DIR}
  image_dir: ${DATA_DIR}/images
  # Maximum threaded processes
  thread_workers: 4

server:
  address: ${ML_INSTALL_SERVER_ADDRESS}
  port: ${ML_INSTALL_SERVER_PORT}
  debug: yes
  jwt:
    #  the secret key that will be used to sign JWT tokens.
    #  ***MAKE SURE YOU CHANGE THE DEFAULT VALUE***
    sign_key: ${JWT_SIGN_PHRASE}
    #  the algorithm to use for signing JWT tokens. The default is HS256.
    algorithm: HS256

logging:
  # Logging levels are: debug, info, warning, error, critical
  # Root logging level
  level: ${ML_INSTALL_LOGGING_LEVEL}

  sanitize:
  # Try to sanitize tokens, keys, passwords, usernames, host and ip addresses from logs
    enabled: yes
    replacement_str: <sanitized>
  console:
  # log to console
    enabled: ${ML_INSTALL_LOGGING_CONSOLE_ENABLED}
#    level: debug
  syslog:
    enabled: ${ML_INSTALL_LOGGING_SYSLOG_ENABLED}
    #    level: debug
#    address: /dev/log
    address: ${ML_INSTALL_LOGGING_SYSLOG_ADDRESS}
  # log to file
  file:
    enabled: ${ML_INSTALL_LOGGING_FILE_ENABLED}
#    level: debug
    # directory where log files will be stored
    path: ${LOGGING_DIR}
    # prefix logname with this string, 'zmML' will become zmML_m1.log for monitor 1
    filename_prefix: zmML
    # Do not suffix logs with monitor id, log everything to a single file (Leave blank to disable)
    file_name:
    # override log file permissions
    # user:
    # group:
  #    level: debug

locks:
  # Dis/En-able file locking (Default: yes)
#  enabled: no
  # override where lock files are stored
  dir: ${DATA_DIR}/locks
  gpu:
    # Max number of parallel processes (Default: 1)
    max: 3
    # Timeout for acquiring lock (Default: 30)
    timeout: 35
  cpu:
    max: 2
    timeout: 24
  tpu:
    max: 1
    timeout: 13


models:
    # An example of a OpenCV YOLO model...
    - name: yolov4 tiny
      enabled: true  # Optional. Defaults to True.
      description: "yolov4 pretrained DarkNet model"  # Optional.
      framework: yolo  # Optional. Defaults to yolo.
      model_type: object # Optional. Defaults to object - object/face/alpr (for identification).
      processor: cpu  # Optional. Defaults to cpu - cpu/gpu/tpu.

      input: "${model_dir}/yolo/yolov4_tiny.weights"  # Required if yolo framework.
      config: "${model_dir}/yolo/yolov4_tiny.cfg"  # Optional (.weights requires .cfg, .onnx and .tflite does not).

    - name: YOLOv4  # REQUIRED
      enabled: true  # Optional. Defaults to True.
      description: "yolov4 pretrained DarkNet model"  # Optional.
      framework: yolo  # Optional. Defaults to yolo.
      model_type: object # Optional. Defaults to object - object/face/alpr (for identification).
      processor: cpu  # Optional. Defaults to cpu - cpu/gpu/tpu.

      input: "${model_dir}/yolo/yolov4.weights"  # Required if yolo framework.
      config: "${model_dir}/yolo/yolov4.cfg"  # Optional (.weights requires .cfg, .onnx and .tflite does not).
      classes: "${model_dir}/coco.names"  # Optional. Default is COCO 2017 classes.

      # Image will be resized to these dimensions before being passed to the model
      height: 512  # Optional. Defaults to 416.
      width: 512  # Optional. Defaults to 416.
      # Square the image by zero-padding the shorter side to the longer side before resize
      square: false  # Optional. Defaults to False.
      # EXPERIMENTAL!  - Only for OpenCV CUDA YOLO models - half precision FP16 target
      cuda_fp_16: false  # Optional. Defaults to False.

      detection_options:
        # The model will only return detections with a confidence score higher than this
        confidence: 0.2  # Optional. Defaults to 0.2.
        # Non Max Suppression threshold. Higher values will remove more overlapping boxes
        nms: 0.4  # Optional. Defaults to 0.4.

    - name: YOLOv4-P6
      input: "${model_dir}/yolo/yolov4-p6.weights"
      config: "${model_dir}/yolo/yolov4-p6.cfg"
      description: "Scaled YOLO v4-P6 pretrained DarkNet 1280x1280"
      height: 1280
      width: 1280

    - name: yolov7 tiny
      description: "yolov7 tiny pretrained DarkNet model"
      input: "${model_dir}/yolo/yolov7-tiny.weights"
      config: "${model_dir}/yolo/yolov7-tiny_darknet.cfg"
      square: yes

    - name: yolov7
      enabled: no
      description: "YOLO v7 pretrained DarkNet model - Requires SiLu activation in OpenCV"
      input: "${model_dir}/yolo/yolov7.weights"
      config: "${model_dir}/yolo/yolov7_darknet.cfg"
      square: yes
      height: 640
      width: 640

    - name: yolov7x
      enabled: no
      description: "YOLO v7-X pretrained DarkNet model - Requires SiLu activation in OpenCV"
      input: "${model_dir}/yolo/yolov7x.weights"
      config: "${model_dir}/yolo/yolov7x_darknet.cfg"
      square: yes
      height: 640
      width: 640


    - name: dlib face
      description: "dlib face model"
      model_type: face
      framework: face_recognition

      detection_model: cnn
      training_model: cnn
      train_max_size: 500
      unknown_face_name: "Unknown"
      unknown_faces_leeway_pixels: 10
      unknown_faces_dir: "${DATA_DIR}/unknown_faces"
      known_faces_dir: "${DATA_DIR}/known_faces"

      detection_options:
        confidence: 0.5
        upsample_times: 1
        num_jitters: 1
        max_size: 600
        recognition_threshold: 0.6

    - name: "openalpr local cpu"
      description: "openalpr local SDK (binary) model"
      model_type: alpr
      framework: alpr
#      processor: cpu

      service: openalpr
      api_type: local
#      api_url: "http://localhost:8080"
#      api_key: "sk_1234567890"

      detection_options:
        alpr_binary: alpr
#        alpr_binary_params:
        confidence: 0.5
        max_size: 600

    - name: "openalpr local gpu"
      description: "openalpr local SDK (binary) GPU CUDA model"
      model_type: alpr
      framework: alpr
      processor: gpu

      service: openalpr
      api_type: local
#      api_url: "http://localhost:8080"
#      api_key: "sk_1234567890"

      detection_options:
        alpr_binary: alpr
        alpr_binary_params: -GPU
        confidence: 0.5
        max_size: 600

    - name: "openalpr cloud"
      description: "openalpr cloud API model"
      model_type: alpr
      framework: alpr
      processor: cpu

      service: openalpr
      api_type: cloud
#        api_url: "https://api.openalpr.com/v2/recognize_bytes"
      api_key: "sk_1234567890"

      detection_options:
          confidence: 0.5
          max_size: 600
#          recognize_vehicle: yes
#          country: us
#          state: ca

    - name: 'Platerecognizer cloud'
#      enabled: no
      model_type: alpr
      framework: alpr
      service: plate_recognizer
      api_type: cloud
#      api_url: "https://api.platerecognizer.com/v1/plate-reader/"
      api_key: someAPIkeyHERE123
      detection_options:
#        regions:
        stats: no
        min_dscore: 0.5
        min_score: 0.5
        max_size: 1600

        payload:
          regions: ['us']
          camera_id: 12

        config:
          region: 'strict'
          mode:  'fast'
